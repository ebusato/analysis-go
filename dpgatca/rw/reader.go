package rw

import (
	"encoding/binary"
	"fmt"
	"io"
	"log"

	"gitlab.in2p3.fr/avirm/analysis-go/dpga/dpgadetector"
	"gitlab.in2p3.fr/avirm/analysis-go/event"
	"gitlab.in2p3.fr/avirm/analysis-go/pulse"
)

type ReadMode byte

const (
	Default ReadMode = iota
	UDPHalfDRS
)

// Reader wraps an io.Reader and reads avirm data files
type Reader struct {
	r                io.Reader
	err              error
	FileHeader       FileHeader
	SigThreshold     uint
	Debug            bool
	ReadMode         ReadMode
	UDPHalfDRSBuffer []byte // relevant only when reading from UDP with packet = half DRS

	IDPrevFrame       uint32
	firstFrameOfEvent *Frame
}

// NewReader returns a new ASM stream in read mode
func NewReader(r io.Reader) (*Reader, error) {
	rr := &Reader{
		r:                r,
		IDPrevFrame:      0,
		SigThreshold:     800,
		ReadMode:         Default,
		UDPHalfDRSBuffer: make([]byte, 8270), //8238),
	}
	rr.readFileHeader(&rr.FileHeader)
	return rr, rr.err
}

// Read implements io.Reader
// func (r *Reader) Read(data []byte) (int, error) {
// 	return r.r.Read(data)
// }

// NoSamples returns the number of samples
func (r *Reader) NoSamples() uint16 {
	return r.FileHeader.NoSamples
}

// Err return the reader error
func (r *Reader) Err() error {
	return r.err
}

func (r *Reader) read(v interface{}, byteOrder binary.ByteOrder) {
	if r.err != nil {
		return
	}
	r.err = binary.Read(r.r, byteOrder, v)
	if r.Debug {
		switch v := v.(type) {
		case *uint32:
			fmt.Printf("word = %x\n", *v)
		case *[]uint32:
			for _, vv := range *v {
				fmt.Printf("word = %x\n", vv)
			}
		}
		//fmt.Printf("word = %x\n", *(v.(*uint32)))
	}
}

func (r *Reader) Read(v interface{}, byteOrder binary.ByteOrder) {
	r.read(v, byteOrder)
}

func (r *Reader) readU16(v *uint16, byteOrder binary.ByteOrder) {
	if r.err != nil {
		return
	}
	var buf [2]byte
	_, r.err = r.r.Read(buf[:])
	if r.err != nil {
		return
	}
	*v = byteOrder.Uint16(buf[:])
	if r.Debug {
		fmt.Printf("word = %x\n", *v)
	}
}

func (r *Reader) ReadU16(v *uint16, byteOrder binary.ByteOrder) {
	r.readU16(v, byteOrder)
}

func (r *Reader) readFileHeader(f *FileHeader) {
	r.read(&f.ModeFile, binary.LittleEndian)
	r.read(&f.FEId, binary.LittleEndian)
	r.readU16(&f.NoSamples, binary.LittleEndian)
	r.read(&f.Time, binary.LittleEndian)
	r.read(&f.Time, binary.LittleEndian)
}

func (r *Reader) readFrameHeader(f *FrameHeader) {
	r.readU16(&f.StartOfFrame, binary.BigEndian)
	r.readU16(&f.NbFrameAmcMsb, binary.BigEndian)
	r.readU16(&f.NbFrameAmcLsb, binary.BigEndian)
	r.readU16(&f.FEIdK30, binary.LittleEndian)
	r.readU16(&f.Mode, binary.BigEndian)
	r.readU16(&f.TriggerType, binary.BigEndian)
	r.readU16(&f.NoFrameAsmMsb, binary.BigEndian)
	r.readU16(&f.NoFrameAsmOsb, binary.BigEndian)
	r.readU16(&f.NoFrameAsmUsb, binary.BigEndian)
	r.readU16(&f.NoFrameAsmLsb, binary.BigEndian)
	r.readU16(&f.Cafe, binary.BigEndian)
	r.readU16(&f.Deca, binary.BigEndian)
	r.readU16(&f.UndefinedMsb, binary.BigEndian)
	r.readU16(&f.UndefinedOsb, binary.BigEndian)
	r.readU16(&f.UndefinedUsb, binary.BigEndian)
	r.readU16(&f.UndefinedLsb, binary.BigEndian)
	r.readU16(&f.TimeStampAsmMsb, binary.BigEndian)
	r.readU16(&f.TimeStampAsmOsb, binary.BigEndian)
	r.readU16(&f.TimeStampAsmUsb, binary.BigEndian)
	r.readU16(&f.TimeStampAsmLsb, binary.BigEndian)
	r.readU16(&f.TimeStampTrigThorAsmMsb, binary.BigEndian)
	r.readU16(&f.TimeStampTrigThorAsmOsb, binary.BigEndian)
	r.readU16(&f.TimeStampTrigThorAsmUsb, binary.BigEndian)
	r.readU16(&f.TimeStampTrigThorAsmLsb, binary.BigEndian)
	r.readU16(&f.ThorTT, binary.BigEndian)
	r.readU16(&f.PatternMsb, binary.BigEndian)
	r.readU16(&f.PatternOsb, binary.BigEndian)
	r.readU16(&f.PatternLsb, binary.BigEndian)
	r.readU16(&f.Bobo, binary.BigEndian)
	r.readU16(&f.ThorTrigTimeStampMsb, binary.BigEndian)
	r.readU16(&f.ThorTrigTimeStampOsb, binary.BigEndian)
	r.readU16(&f.ThorTrigTimeStampLsb, binary.BigEndian)
	r.readU16(&f.CptTriggerThorMsb, binary.BigEndian)
	r.readU16(&f.CptTriggerThorLsb, binary.BigEndian)
	r.readU16(&f.CptTriggerAsmMsb, binary.BigEndian)
	r.readU16(&f.CptTriggerAsmLsb, binary.BigEndian)
	r.readU16(&f.NoSamples, binary.BigEndian)
	// 	f.AMCFrameCounter = (uint32(f.AMCFrameCounters[0]) << 16) + uint32(f.AMCFrameCounters[1])
	// 	f.FrontEndId = (f.ParityFEIdCtrl & 0x7fff) >> 8
	// 	f.ASMFrameCounter = (uint64(f.ASMFrameCounters[0]) << 48) + (uint64(f.ASMFrameCounters[1]) << 32) + (uint64(f.ASMFrameCounters[2]) << 16) + uint64(f.ASMFrameCounters[3])
	// 	temp := (uint64(f.TimeStampsASM[0]) << 16) | uint64(f.TimeStampsASM[1])
	// 	temp = (temp << 32)
	// 	temp1 := (uint64(f.TimeStampsASM[2]) << 16) | uint64(f.TimeStampsASM[3])
	// 	// 	temp |= temp1
	// 	f.TimeStampASM = temp | temp1
	///////////////////////////////////////////////////////////////////////
	// This +11 is necessary but currently not really understood
	// 11 clock periods are generated by "machine d'etat" in ASM firmware
	// These additionnal 11 samples should currently be considered junk
	//f.Data.SetNoSamples(f.NoSamples + 11)
	///////////////////////////////////////////////////////////////////////

	f.FEId = f.FEIdK30 & 0x7f
	f.CptTriggerThor = (uint32(f.CptTriggerThorMsb) << 16) | uint32(f.CptTriggerThorLsb)
}

func (r *Reader) readFrameData(data *HalfDRSData) {
	if r.err != nil {
		return
	}
	//f.Print("short")
	for i := range data.Data {
		chanData := &data.Data[i]
		/*
			for r.readParityChanIdCtrl(f, i) {
				noAttempts++
				if noAttempts >= 4 {
					log.Fatalf("reader.readParityChanIdCtrl: noAttempts >= 4\n")
				}
			}
			if noAttempts == 1 {
				f.Err = ErrorCode1
			}
			noAttempts = 0
			//fmt.Printf("data.ParityChanIdCtrl = %x\n", data.ParityChanIdCtrl)
		*/
		r.readU16(&chanData.FirstChanWord, binary.LittleEndian)
		r.readU16(&chanData.SecondChanWord, binary.LittleEndian)
		r.read(&chanData.Amplitudes, binary.BigEndian)

		chanData.Channel = chanData.FirstChanWord & 0x7f
		chanData.SRout = chanData.SecondChanWord
	}
}

func (r *Reader) readFrameTrailer(f *FrameTrailer) {
	r.readU16(&f.Crc, binary.BigEndian)
	// Temporary fix, until we understand where these additionnal 16 bits come from
	if f.Crc != ctrl0xCRC {
		//fmt.Printf("CRC = %x (should be %x)\n", f.CRC, ctrl0xCRC)
		r.readU16(&f.Crc, binary.BigEndian)
		//fmt.Printf("new CRC = %x\n", f.CRC)
	}
	// End of temporary fix
	r.readU16(&f.EoF, binary.BigEndian)
}

func (r *Reader) Frame() (*Frame, error) {
	f := &Frame{}
	if r.Debug {
		fmt.Printf("rw: start reading frame\n")
	}
	switch r.ReadMode {
	case Default:
		r.readFrameHeader(&f.Header)
		r.err = f.Header.Integrity()
		if r.err != nil {
			f.Header.Print()
			panic(r.err)
		}
		f.SetDataSliceLen(int(f.Header.NoSamples))
		r.readFrameData(&f.Data)
		f.QuartetAbsIdx72 = uint8(f.Data.Data[0].Channel / 4) // to be changed (add FEId into calculation)
		f.QuartetAbsIdx60 = dpgadetector.FEIdAndChanIdToQuartetAbsIdx60(f.Header.FEId, f.Data.Data[0].Channel/4, true)
		r.readFrameTrailer(&f.Trailer)
		r.err = f.Trailer.Integrity()
		if r.err != nil {
			f.Trailer.Print()
			panic(r.err)
		}
		// 		r.err = f.IntegrityData()
		// 		if r.err != nil {
		// 			fmt.Println("IntegrityData check failed")
		// 			f.Print("short")
		// 			return nil, nil
		// 		}
		// 		r.readTrailer(f)
		// 		r.err = f.IntegrityTrailer()
		// 		if r.err != nil {
		// 			fmt.Println("IntegrityTrailer check failed")
		// 			f.Print("medium")
		// 			return nil, nil
		// 		}
		/*case UDPHalfDRS:
		for i := range r.UDPHalfDRSBuffer {
			r.UDPHalfDRSBuffer[i] = 0
		}
		n, err := r.r.Read(r.UDPHalfDRSBuffer)
		f.UDPPayloadSize = n
		if r.err != nil {
			panic(err)
		}
		f.FillHeader(r.UDPHalfDRSBuffer)
		err = f.IntegrityHeader()
		if err != nil {
			panic(err)
		}
		f.FillData(r.UDPHalfDRSBuffer)
		err = f.IntegrityData()
		if err != nil {
			panic(err)
		}
		f.FillTrailer(r.UDPHalfDRSBuffer)
		err = f.IntegrityTrailer()
		if err != nil {
			panic(err)
		}
		// 	for i := range r.UDPHalfDRSBuffer {
		// 		fmt.Printf(" r.UDPHalfDRSBuffer[%v] = %x \n", i, r.UDPHalfDRSBuffer[i])
		// 	}
		*/
	}
	return f, r.err
}

func MakePulse(c *ChanData, quartetAbsIdx72 uint8, sigThreshold uint) *pulse.Pulse {
	iChannelAbs288 := uint16(c.Channel) // to be changed (add FEId into calculation)
	if iChannelAbs288 >= 288 {
		panic("reader: iChannelAbs288 >= 288")
	}
	detChannel := dpgadetector.Det.ChannelFromIdAbs288(iChannelAbs288)
	mypulse := pulse.NewPulse(detChannel)
	mypulse.SRout = uint16(c.SRout)
	iHemi, iASM, iDRS, iQuartet := dpgadetector.QuartetAbsIdx72ToRelIdx(quartetAbsIdx72)
	iChannel := uint8(c.Channel % 4)
	for i := range c.Amplitudes {
		ampl := float64(c.Amplitudes[i])
		sample := pulse.NewSample(ampl, uint16(i), float64(i)*dpgadetector.Det.SamplingFreq())
		mypulse.AddSample(sample, dpgadetector.Det.Capacitor(iHemi, iASM, iDRS, iQuartet, iChannel, sample.CapaIndex(mypulse.SRout)), float64(sigThreshold))
	}
	return mypulse
}

func MakePulses(f *Frame, sigThreshold uint) []*pulse.Pulse {
	var pulses []*pulse.Pulse
	for i := range f.Data.Data {
		data := &f.Data.Data[i]
		pulses = append(pulses, MakePulse(data, f.QuartetAbsIdx72, sigThreshold))
	}
	return pulses
}

func (r *Reader) ReadNextEvent() (*event.Event, bool) {
	event := event.NewEvent(dpgadetector.Det.NoClusters())
	firstPass := true
	for {
		var frame *Frame = nil
		if r.firstFrameOfEvent != nil { // enter here only for first frame of event
			frame = r.firstFrameOfEvent
			if r.err != nil {
				log.Println("error not nil", r.err)
				if r.err == io.EOF {
					return nil, false
				}
			}
			r.firstFrameOfEvent = nil
		} else { // enter here for all frames but the first one of the event
			frametemp, err := r.Frame()
			if err != nil && err != io.EOF {
				log.Fatal("error not nil", err)
			}
			frame = frametemp
		}
		var ID uint32 = frame.Header.CptTriggerThor
		fmt.Println("ID =", ID)
		if firstPass || ID == r.IDPrevFrame { // fill event
			if firstPass {
				event.ID = uint(ID)
			}
			firstPass = false

			////////////////////////////////////////////////////////
			// determine typeOfFrame
			/*
				switch fifoID144 % 2 {
				case 0:
					frame.typeOfFrame = FirstFrameOfCluster
				case 1:
					frame.typeOfFrame = SecondFrameOfCluster
				}
			*/
			////////////////////////////////////////////////////////

			pulses := MakePulses(frame, r.SigThreshold)

			if frame.QuartetAbsIdx72%6 == 5 {
				iClusterWoData := 0 // to be changed to accept mainy ASMs
				//fmt.Println(iClusterWoData)
				event.ClustersWoData[iClusterWoData].ID = uint8(iClusterWoData)

				////////////////////////////////////////////////////////
				// Put pulses in event
				event.ClustersWoData[iClusterWoData].Pulses[0] = *pulses[0]
				event.ClustersWoData[iClusterWoData].Pulses[1] = *pulses[1]
				event.ClustersWoData[iClusterWoData].Pulses[2] = *pulses[2]
				event.ClustersWoData[iClusterWoData].Pulses[3] = *pulses[3]
				////////////////////////////////////////////////////////
			} else {
				iCluster := frame.QuartetAbsIdx60
				if iCluster >= 60 {
					log.Fatalf("error ! iCluster=%v (>= 60)\n", iCluster)
				}
				fmt.Printf("iCluster = %v\n", iCluster)
				event.Clusters[iCluster].ID = iCluster

				////////////////////////////////////////////////////////
				// Put pulses in event
				event.Clusters[iCluster].Pulses[0] = *pulses[0]
				event.Clusters[iCluster].Pulses[1] = *pulses[1]
				event.Clusters[iCluster].Pulses[2] = *pulses[2]
				event.Clusters[iCluster].Pulses[3] = *pulses[3]
				////////////////////////////////////////////////////////
			}
		} else { // switched to next event
			r.firstFrameOfEvent = frame
			return event, true
		}
		r.IDPrevFrame = ID
	}
	log.Fatalf("error ! you should never end up here")
	return nil, false
}

/*
var (
	noAttempts         int
	QuartetAbsIdx60old uint8
)

// readParityChanIdCtrl is a temporary fix, until we understand where the additionnal 16 bits words come from
func (r *Reader) readParityChanIdCtrl(f *Frame, i int) bool {
	data := &f.Data.Data[i]
	r.readU16(&data.ParityChanIdCtrl, binary.BigEndian)

	//fmt.Printf("%v, %x (noAttempts=%v)\n", i, data.ParityChanIdCtrl, noAttempts)
	if (data.ParityChanIdCtrl & 0xff) != ctrl0xfd {
		//panic("(data.ParityChanIdCtrl & 0xff) != ctrl0xfd")
		return true
	}
	data.Channel = (data.ParityChanIdCtrl & 0x7f00) >> 8
	if data.Channel != f.Data.Data[0].Channel+uint16(i) {
		//panic("reader.readParityChanIdCtrl: data.Channel != f.Data.Data[0].Channel+uint16(i)")
		return true
	}
	f.QuartetAbsIdx60 = dpgadetector.FEIdAndChanIdToQuartetAbsIdx60(f.FrontEndId, data.Channel, false)
	//fmt.Printf("   -> %v, %v, %v\n", data.Channel, f.QuartetAbsIdx60, QuartetAbsIdx60old)
	if i > 0 && f.QuartetAbsIdx60 != QuartetAbsIdx60old {
		//panic("i > 0 && f.QuartetAbsIdx60 != QuartetAbsIdx60old")
		return true
	}
	QuartetAbsIdx60old = f.QuartetAbsIdx60
	return false
}
*/
